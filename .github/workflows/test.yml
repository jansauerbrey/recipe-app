name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s
          --network-alias mongodb

    steps:
    - uses: actions/checkout@v4

    - name: Setup Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: '2.1.4'  # Latest stable 2.x version

    - name: Make test script executable
      run: chmod +x test.sh
      
    - name: Install MongoDB tools
      run: |
        sudo apt-get update
        sudo apt-get install -y netcat-openbsd
        wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh

    - name: Check MongoDB Status
      run: |
        set -e  # Exit on any error
        echo "Network information..."
        ip addr show
        echo "DNS resolution..."
        getent hosts mongodb || true
        echo "MongoDB service container status..."
        docker ps -a | grep mongo:6 || true
        echo "MongoDB container info..."
        CONTAINER_ID=$(docker ps -q --filter ancestor=mongo:6)
        if [ ! -z "$CONTAINER_ID" ]; then
          echo "Container logs:"
          docker logs $CONTAINER_ID
          echo "Container network settings:"
          docker inspect -f '{{json .NetworkSettings.Networks}}' $CONTAINER_ID
          echo "Container network mode:"
          docker inspect -f '{{.HostConfig.NetworkMode}}' $CONTAINER_ID
          echo "Container environment variables:"
          docker inspect -f '{{range .Config.Env}}{{println .}}{{end}}' $CONTAINER_ID
          echo "Container command:"
          docker inspect -f '{{.Config.Cmd}}' $CONTAINER_ID
          echo "Container mounts:"
          docker inspect -f '{{range .Mounts}}{{.Source}}:{{.Destination}} {{end}}' $CONTAINER_ID
          echo "MongoDB process status:"
          docker exec $CONTAINER_ID ps aux | grep mongo
          echo "Installing network tools in container..."
          docker exec $CONTAINER_ID apt-get update
          docker exec $CONTAINER_ID apt-get install -y net-tools
          echo "MongoDB bind address:"
          docker exec $CONTAINER_ID netstat -tulpn | grep mongo
          echo "MongoDB configuration:"
          docker exec $CONTAINER_ID cat /etc/mongod.conf.orig || true
          echo "Testing MongoDB connection from inside container..."
          docker exec $CONTAINER_ID mongo --eval "db.runCommand({ ping: 1 })"
        else
          echo "No MongoDB container found"
        fi

        echo "Waiting for MongoDB to be fully ready..."
        sleep 10
        
        # Function to retry a command
        retry() {
          local retries=$1
          shift
          local count=0
          until "$@"; do
            exit=$?
            count=$((count + 1))
            if [ $count -lt $retries ]; then
              echo "Command failed. Attempt $count/$retries. Retrying in 5s..."
              sleep 5
            else
              echo "Command failed after $retries attempts"
              return $exit
            fi
          done
          return 0
        }

        echo "Step 1: Testing connection from host..."
        if ! retry 3 timeout 5 nc -zv localhost 27017 2>&1; then
          echo "Error: MongoDB port is not accessible after retries"
          exit 1
        fi
        echo "Port check successful"

        echo "Step 2: Testing MongoDB version..."
        if ! retry 3 bash -c "mongosh 'mongodb://localhost:27017' --eval 'db.version()' --quiet 2>&1"; then
          echo "Error: Could not get MongoDB version after retries"
          exit 1
        fi
        
        echo "Step 3: Testing database creation..."
        if ! retry 3 bash -c "mongosh 'mongodb://localhost:27017/recipe_app_test' --eval 'db.createCollection(\"test\"); db.test.insertOne({test: true}); db.test.findOne()' 2>&1"; then
          echo "Error: Could not create test collection and insert data after retries"
          exit 1
        fi
        
        echo "Step 4: Testing connection with test URI..."
        if ! retry 3 bash -c "mongosh 'mongodb://localhost:27017/recipe_app_test' --eval 'db.runCommand({ping: 1})' 2>&1"; then
          echo "Error: Could not connect using test URI after retries"
          exit 1
        fi

        echo "Step 5: Checking MongoDB server status..."
        if ! mongosh "mongodb://localhost:27017/admin" --eval 'db.serverStatus()' 2>&1; then
          echo "Warning: Could not get MongoDB server status"
        fi

        echo "Step 6: Checking MongoDB authentication status..."
        if ! mongosh "mongodb://localhost:27017/admin" --eval 'db.runCommand({ getCmdLineOpts: 1 }).parsed.security' 2>&1; then
          echo "Warning: Could not get MongoDB security settings"
        fi

        echo "Step 7: Testing Deno MongoDB driver connection..."
        echo 'import { MongoClient } from "https://deno.land/x/mongo@v0.32.0/mod.ts";
        async function testConnection(uri: string) {
          const client = new MongoClient();
          try {
            console.log("Attempting connection to:", uri);
            await client.connect(uri);
            console.log("Connection successful");
            await client.close();
            return true;
          } catch (error) {
            console.error("Connection failed:", error);
            await client.close();
            return false;
          }
        }
        
        const uris = [
          "mongodb://localhost:27017",
          "mongodb://127.0.0.1:27017",
          "mongodb://mongodb:27017",
          "mongodb://localhost:27017/recipe_app_test",
          "mongodb://127.0.0.1:27017/recipe_app_test",
          "mongodb://mongodb:27017/recipe_app_test"
        ];
        
        let success = false;
        for (const uri of uris) {
          if (await testConnection(uri)) {
            success = true;
            break;
          }
        }
        
        if (!success) {
          console.error("All connection attempts failed");
          Deno.exit(1);
        }' > test_connection.ts
        
        if ! deno run --allow-net test_connection.ts; then
          echo "Error: Could not connect using Deno MongoDB driver"
          exit 1
        fi
        
        echo "All MongoDB checks passed successfully"
        
    - name: Run Tests
      env:
        MONGODB_URI: mongodb://127.0.0.1:27017/recipe_app_test
        MONGO_DB_NAME: recipe_app_test
      run: |
        echo "Starting tests with MongoDB URI: $MONGODB_URI"
        ./test.sh
